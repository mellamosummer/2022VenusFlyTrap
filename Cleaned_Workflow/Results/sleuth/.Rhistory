if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
set.seed()
library(Biostrings)
setwd(/Users/summerblanco/Desktop/Github/G_maculatum_novogene/)
setwd("Users/summerblanco/Desktop/Github/G_maculatum_novogene/")
spec1_31 <- read.table("reads.histo")
spec1_31 <- read.table("reads.histo")
install.packages("read.table")
library(read.table)
library("read.table")
install.packages("read.table")
install.packages("read.Lines")
library("read.table")
spec1_31 <- read.table("reads.histo")
install.packages("read.delim")
install.packages("findGSE")
install.packages("findGSE")
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
install.packages("B243997")
updateR(admin_password = 'B243997')
install_github('andreacirilloac/updateR')
library(updateR)
library('updateR')
install.packages("findGSE")
install.packages('sleuth')
library("sleuth")
install.packages("sleuth")
install.packages("sleuth")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("BiocManager")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("pachterlab/sleuth")
#set input and output dirs
datapath <- "/Users/summerblanco/Desktop/Github/2022VenusFlyTrap/Cleaned_Workflow/Results/quant"  # you need to modify this line to match the path made by your BASH script
resultdir <- "/Users/summerblanco/Desktop/Github/2022VenusFlyTrap/Cleaned_Workflow/Results/sleuth"   # you need to modify this line to match the path made by your BASH script
setwd(resultdir)
library("sleuth")
setwd(resultdir)
sample <- c('JMGQ',
'JMGR',
'JMGS',
'JMGT',
'JMGU',
'JMGW',
'JMGX',
'JMGY',
'JMGZ',
'JMHA',
'JMHB',
'JMHC',
'JMHD',
'JMHE',
'JMHF',
'JMHG',
'JMHH',
'JMHI',
'JMHJ',
'JMHK',
'JMHL',
'JMHM',
'JMHN',
'JMHP',
'JMHQ',
'JMHR',
'JMHS',
'JMHT',
'JMHU',
'JMHW',
'JMHX',
'JMHY',
'JMHZ',
'JMIA',
'JMIB',
'JMIC',
'JMID',
'JMIE',
'JMIF',
'JMIG',
'JMIH',
'JMII',
'JMIJ',
'JMIK',
'JMIL',
'JMIM',
'JMIN',
'JMIP')
kallisto_dirs <- file.path(datapath, sample) #create vector of paths to kallisto output directories
# check that directories and metadata object are OK
print(kallisto_dirs)
print(samples_to_conditions)
condition <- c('LeafTrap_NoPrey_60',
'LeafTrap_NoPrey_5',
'Petiole_NoPrey_0',
'LeafTrap_NoPrey_5',
'LeafTrap_Prey_60',
'LeafTrap_Prey_60',
'LeafTrap_Prey_60',
'LeafTrap_Prey_180',
'LeafTrap_Prey_180',
'LeafTrap_Prey_180',
'LeafTrap_Prey_180',
'LeafTrap_Prey_4320',
'LeafTrap_Prey_4320',
'LeafTrap_Prey_4320',
'LeafTrap_NoPrey_0',
'LeafTrap_Prey_4320',
'LeafTrap_Prey_1440',
'LeafTrap_Prey_1440',
'LeafTrap_Prey_1440',
'LeafTrap_Prey_1440',
'LeafTrap_Prey_2880',
'LeafTrap_Prey_2880',
'LeafTrap_Prey_2880',
'LeafTrap_Prey_2880',
'LeafTrap_NoPrey_0',
'LeafTrap_NoPrey_5',
'LeafTrap_NoPrey_5',
'LeafTrap_NoPrey_1440',
'LeafTrap_NoPrey_1440',
'LeafTrap_NoPrey_1440',
'LeafTrap_NoPrey_1440',
'LeafTrap_NoPrey_60',
'LeafTrap_NoPrey_60',
'LeafTrap_NoPrey_60',
'LeafTrap_NoPrey_0',
'LeafTrap_Prey_720',
'LeafTrap_Prey_720',
'LeafTrap_Prey_720',
'LeafTrap_Prey_720',
'Petiole_NoPrey_0',
'Petiole_NoPrey_0',
'Petiole_NoPrey_0',
'LeafTrap_NoPrey_0',
'LeafTrap_Prey_5',
'LeafTrap_Prey_5',
'LeafTrap_Prey_5',
'LeafTrap_Prey_5',
'LeafTrap_Prey_60')
#create vector of treatments in same order as sample IDs
samples_to_conditions <- data.frame(sample,condition) #create dataframe associating treatments to sample IDs
samples_to_conditions <- dplyr::mutate(samples_to_conditions, path = kallisto_dirs) #add kallisto output paths to dataframe
# check that directories and metadata object are OK
print(kallisto_dirs)
print(samples_to_conditions)
print(samples_to_conditions)
# read data into sleuth_object, import bootstrap summaries and TPMs, and perform normalization/filtering steps
sleuth_object <- sleuth_prep(samples_to_conditions, extra_bootstrap_summary = TRUE, read_bootstrap_tpm=TRUE)
# estimate parameters for the full linear model that includes the conditions as factors
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
# estimate parameters for the reduced linear model that assumes equal transcript abundances in both conditions
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
# perform likelihood ratio test to identify transcripts whose fit is significantly better under full model relative to reduced model
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
# check that sleuth object is OK
models(sleuth_object)
plot_pca(sleuth_object)
plot_pca(sleuth_object, color_by='condition')
plot_volcano(sleuth_object)
plot_volcano(sleuth_object, test, test_type= "lrt")
plot_volcano(sleuth_object, test)
plot_loadings(sleuth_object)
#plot PCA
pdf(file="SleuthPCAAllSamples.pdf")
plot_pca(sleuth_object, color_by='condition')
dev.off()
pdf(file="SleuthPCALoadingsAllSamples.pdf")
plot_loadings(sleuth_object)
dev.off()
condition <- c('LeafTrap_NoPrey_0060',
'LeafTrap_NoPrey_0005',
'Petiole_NoPrey_0000',
'LeafTrap_NoPrey_0005',
'LeafTrap_Prey_0060',
'LeafTrap_Prey_0060',
'LeafTrap_Prey_0060',
'LeafTrap_Prey_0180',
'LeafTrap_Prey_0180',
'LeafTrap_Prey_0180',
'LeafTrap_Prey_0180',
'LeafTrap_Prey_4320',
'LeafTrap_Prey_4320',
'LeafTrap_Prey_4320',
'LeafTrap_NoPrey_0000',
'LeafTrap_Prey_4320',
'LeafTrap_Prey_1440',
'LeafTrap_Prey_1440',
'LeafTrap_Prey_1440',
'LeafTrap_Prey_1440',
'LeafTrap_Prey_2880',
'LeafTrap_Prey_2880',
'LeafTrap_Prey_2880',
'LeafTrap_Prey_2880',
'LeafTrap_NoPrey_0000',
'LeafTrap_NoPrey_0005',
'LeafTrap_NoPrey_0005',
'LeafTrap_NoPrey_1440',
'LeafTrap_NoPrey_1440',
'LeafTrap_NoPrey_1440',
'LeafTrap_NoPrey_1440',
'LeafTrap_NoPrey_0060',
'LeafTrap_NoPrey_0060',
'LeafTrap_NoPrey_0060',
'LeafTrap_NoPrey_0000',
'LeafTrap_Prey_0720',
'LeafTrap_Prey_0720',
'LeafTrap_Prey_0720',
'LeafTrap_Prey_0720',
'Petiole_NoPrey_0000',
'Petiole_NoPrey_0000',
'Petiole_NoPrey_0000',
'LeafTrap_NoPrey_0000',
'LeafTrap_Prey_0005',
'LeafTrap_Prey_0005',
'LeafTrap_Prey_0005',
'LeafTrap_Prey_0005',
'LeafTrap_Prey_0060')
#create vector of treatments in same order as sample IDs
samples_to_conditions <- data.frame(sample,condition) #create dataframe associating treatments to sample IDs
samples_to_conditions <- dplyr::mutate(samples_to_conditions, path = kallisto_dirs) #add kallisto output paths to dataframe
# check that directories and metadata object are OK
print(kallisto_dirs)
print(samples_to_conditions)
# read data into sleuth_object, import bootstrap summaries and TPMs, and perform normalization/filtering steps
sleuth_object <- sleuth_prep(samples_to_conditions, extra_bootstrap_summary = TRUE, read_bootstrap_tpm=TRUE)
#create a sample-to-condition metadata object
sample <- c('JMGQ','JMGR','JMGS','JMGT','JMGU','JMGW','JMGX','JMGY','JMGZ','JMHA','JMHB','JMHC','JMHD','JMHE','JMHF','JMHG','JMHH','JMHI','JMHJ','JMHK','JMHL','JMHM','JMHN','JMHP','JMHQ','JMHR','JMHS','JMHT','JMHU','JMHW','JMHX','JMHY','JMHZ','JMIA','JMIB','JMIC','JMID','JMIE','JMIF','JMIG','JMIH','JMII','JMIJ','JMIK','JMIL','JMIM','JMIN','JMIP')
#create vector of sample IDs
kallisto_dirs <- file.path(datapath, sample) #create vector of paths to kallisto output directories
condition <- c('LeafTrap','LeafTrap','Petiole','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','Petiole','Petiole','Petiole','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap','LeafTrap')
#create vector of treatments in same order as sample IDs
samples_to_conditions <- data.frame(sample,condition) #create dataframe associating treatments to sample IDs
samples_to_conditions <- dplyr::mutate(samples_to_conditions, path = kallisto_dirs) #add kallisto output paths to dataframe
# read data into sleuth_object, import bootstrap summaries and TPMs, and perform normalization/filtering steps
sleuth_object <- sleuth_prep(samples_to_conditions, extra_bootstrap_summary = TRUE, read_bootstrap_tpm=TRUE)
# estimate parameters for the full linear model that includes the conditions as factors
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
# estimate parameters for the reduced linear model that assumes equal transcript abundances in both conditions
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
# perform likelihood ratio test to identify transcripts whose fit is significantly better under full model relative to reduced model
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
# check that sleuth object is OK
models(sleuth_object)
plot_pca(sleuth_object, color_by='condition')
#plot PCA
pdf(file="SleuthPCALeafVsTraps.pdf")
plot_pca(sleuth_object, color_by='condition')
dev.off()
plot_loadings(sleuth_object)
pdf(file="SleuthPCALoadingsLeafVsTraps.pdf")
plot_loadings(sleuth_object)
dev.off()
#create a sample-to-condition metadata object
sample <- c('JMGU','JMGW','JMGX','JMIP','JMGQ','JMIA','JMHY','JMHZ')
#create vector of sample IDs
kallisto_dirs <- file.path(datapath, sample) #create vector of paths to kallisto output directories
condition <- c('Prey','Prey','Prey','Prey','NoPrey','NoPrey','NoPrey','NoPrey')
#create vector of treatments in same order as sample IDs
samples_to_conditions <- data.frame(sample,condition) #create dataframe associating treatments to sample IDs
samples_to_conditions <- dplyr::mutate(samples_to_conditions, path = kallisto_dirs) #add kallisto output paths to dataframe
# read data into sleuth_object, import bootstrap summaries and TPMs, and perform normalization/filtering steps
sleuth_object <- sleuth_prep(samples_to_conditions, extra_bootstrap_summary = TRUE, read_bootstrap_tpm=TRUE)
# estimate parameters for the full linear model that includes the conditions as factors
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
# estimate parameters for the reduced linear model that assumes equal transcript abundances in both conditions
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
# perform likelihood ratio test to identify transcripts whose fit is significantly better under full model relative to reduced model
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
# check that sleuth object is OK
models(sleuth_object)
plot_pca(sleuth_object, color_by='condition')
#plot PCA
pdf(file="SleuthPCAPreyVsNoPrey1hr.pdf")
plot_pca(sleuth_object, color_by='condition')
dev.off()
pdf(file="SleuthPCALoadingsPreyVsNoPrey1hr.pdf")
plot_loadings(sleuth_object)
dev.off()
#create a sample-to-condition metadata object
sample <- c('JMHH','JMHI','JMHJ','JMHK','JMHT','JMHU','JMHW','JMHX')
#create vector of sample IDs
kallisto_dirs <- file.path(datapath, sample) #create vector of paths to kallisto output directories
condition <- c('Prey','Prey','Prey','Prey','NoPrey','NoPrey','NoPrey','NoPrey')
#create vector of treatments in same order as sample IDs
samples_to_conditions <- data.frame(sample,condition) #create dataframe associating treatments to sample IDs
samples_to_conditions <- dplyr::mutate(samples_to_conditions, path = kallisto_dirs) #add kallisto output paths to dataframe
# read data into sleuth_object, import bootstrap summaries and TPMs, and perform normalization/filtering steps
sleuth_object <- sleuth_prep(samples_to_conditions, extra_bootstrap_summary = TRUE, read_bootstrap_tpm=TRUE)
# estimate parameters for the full linear model that includes the conditions as factors
sleuth_object <- sleuth_fit(sleuth_object, ~condition, 'full')
# estimate parameters for the reduced linear model that assumes equal transcript abundances in both conditions
sleuth_object <- sleuth_fit(sleuth_object, ~1, 'reduced')
# perform likelihood ratio test to identify transcripts whose fit is significantly better under full model relative to reduced model
sleuth_object <- sleuth_lrt(sleuth_object, 'reduced', 'full')
# check that sleuth object is OK
models(sleuth_object)
plot_pca(sleuth_object, color_by='condition')
#plot PCA
pdf(file="SleuthPCAPreyVsNoPrey24hr.pdf")
plot_pca(sleuth_object, color_by='condition')
dev.off()
pdf(file="SleuthPCALoadingsPreyVsNoPrey24hr.pdf")
plot_loadings(sleuth_object)
dev.off()
